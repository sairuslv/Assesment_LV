# -*- coding: utf-8 -*-
"""LVADSUSR108_Sairus_Lab1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dqnXCfecTsAeA38O2WQZTGIeWlNsToNn
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report

var_m_data= pd.read_csv('/content/winequality-red.csv')
var_m_data

var_m_data.info()

var_m_data.isnull()

var_m_data.fillna(var_m_data.median(), inplace=True)
var_m_data.info()

missing_values_check = var_m_data.isnull().sum()
missing_values_check

#labbelling 1/0 acc to quality
var_m_data['quality_label'] = var_m_data['quality'].apply(lambda x: 1 if x >= 7 else 0)
var_m_data

quality_distribution = var_m_data['quality_label'].value_counts(normalize=True)
quality_distribution

Q1 = var_m_data.quantile(0.25)
Q3 = var_m_data.quantile(0.75)
IQR = Q3 - Q1
IQR

outliers = ((var_m_data < (Q1 - 1.5 * IQR)) | (var_m_data > (Q3 + 1.5 * IQR))).any(axis=1)

var_capped = var_m_data.copy()

var_capped.describe()

from imblearn.over_sampling import SMOTE
from sklearn.model_selection import train_test_split


X = var_capped.drop(['quality', 'quality_label'], axis=1)
y = var_capped['quality_label']

smote = SMOTE(random_state=42)
X_smote, y_smote = smote.fit_resample(X, y)

X_train, X_test, y_train, y_test = train_test_split(X_smote, y_smote, test_size=0.2, random_state=42)

balance_check = y_train.value_counts(normalize=True)

balance_check

rf_classifier = RandomForestClassifier(n_estimators=100, class_weight='balanced', random_state=42)
rf_classifier.fit(X_train, y_train)
y_pred_rf = rf_classifier.predict(X_test)
print(classification_report(y_test, y_pred_rf, target_names=['Bad', 'Good']))

