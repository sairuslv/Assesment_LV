# -*- coding: utf-8 -*-
"""LVADSUSR108_Sairus_Lab2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/154PPbWc2vT8jVsO48TU4zKOtSoYscByB
"""

from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.compose import ColumnTransformer

from sklearn.pipeline import Pipeline
import pandas as pd

var_m_mall_data = pd.read_csv('/content/Mall_Customers.csv')

var_m_mall_data.info()
var_m_mall_data.head()

var_m_mall_data['Annual Income (k$)'].fillna(var_m_mall_data['Annual Income (k$)'].median(), inplace=True)

var_m_mall_data.info()

le = LabelEncoder()
var_m_mall_data['Gender'] = le.fit_transform(var_m_mall_data['Gender'])
var_m_mall_data

var_m_mall_data['Spending to Income Ratio'] = var_m_mall_data['Spending Score (1-100)'] / var_m_mall_data['Annual Income (k$)']
var_m_mall_data

#normalisation
scaler = StandardScaler()
scaled_features = scaler.fit_transform(var_m_mall_data[['Age', 'Annual Income (k$)', 'Spending Score (1-100)', 'Spending to Income Ratio']])

var_scaled_mall_data = pd.DataFrame(scaled_features, columns=['Age', 'Annual Income', 'Spending Score', 'Spending to Income Ratio'])
var_scaled_mall_data['Gender'] = var_m_mall_data['Gender']
var_scaled_mall_data.head()

from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

wcss = []
silhouette_scores = []
for i in range(2, 11):
    kmeans = KMeans(n_clusters=i, random_state=42)
    kmeans.fit(var_scaled_mall_data)
    wcss.append(kmeans.inertia_)
    silhouette_scores.append(silhouette_score(var_scaled_mall_data, kmeans.labels_))

import matplotlib.pyplot as plt

fig, ax1 = plt.subplots()

#used twin plot using subplot and twinx
ax1.set_xlabel('Number of Clusters')
ax1.set_ylabel('WCSS', color='red')
ax1.plot(range(2, 11), wcss, color='red')
ax1.tick_params(axis='y', labelcolor='red')

ax2 = ax1.twinx()
ax2.set_ylabel('Silhouette Score', color='blue')
ax2.plot(range(2, 11), silhouette_scores, color='blue')
ax2.tick_params(axis='y', labelcolor='blue')

fig.tight_layout()
plt.title('Elbow Method vs Silhouette Score for Cluster Number')
plt.show()

kmeans = KMeans(n_clusters=5, random_state=42) #can also take 6 as n_clusters based on above graph
clusters = kmeans.fit_predict(var_scaled_mall_data)

var_scaled_mall_data['Cluster'] = clusters

cluster_analysis = var_scaled_mall_data.groupby('Cluster').mean()
print(cluster_analysis)

