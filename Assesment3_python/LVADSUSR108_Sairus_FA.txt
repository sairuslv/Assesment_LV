# -*- coding: utf-8 -*-
"""LVADSUSR108-Sairus-FA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oVN-Owt6r1QSMzTDtE5oX44lS6LwlJ1C
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df= pd.read_excel('/content/Walmart_Dataset Python_Final_Assessment.xlsx')
df.info()# using this came to know all datatype and count of non null values of all columns

df

df.describe()

df['Order ID'].value_counts()#length of rows

df['Category'].value_counts()

df['Geography'].value_counts()#90% are from LA, SF and Seattle i think so lets see in future analysis

number_of_cols= len(df.columns)
number_of_cols

num_of_rows=df.shape[0]
num_of_rows#this can include duplicates

no_dup= df.drop_duplicates()
print(no_dup.shape[0])#so no duplicate rows found

missing= df.isna().sum()
missing #so no missing values found so we are good to go

df_num= df[['Sales','Quantity','Profit']]
df_num # these are the 3 columns with numerical data

print('Average sales done :',round(df_num['Sales'].mean(),2))
print('Average quantity sold :',round(df_num['Quantity'].mean(),0))
print('Average profit made :',round(df_num['Profit'].mean(),2))

# Splitting the 'Geography' column into three separate columns for country, state, and city
df[['Country', 'State', 'City']] = df['Geography'].str.split(',', expand=True)
df

days_diff = []
for i in range(len(df)):
    day = int((df["Ship Date"][i] - df["Order Date"][i]).days)
    days_diff.append(day)
#here we are counting how much time it takes to deliver a package
# days_diff.count(0)
# days_diff.count(1)
days_diff.count(2)

data = df.assign(Days_Difference = days_diff)
data.head()

temp=data.groupby(['Category','Days_Difference']).size()
temp

df[data['Days_Difference']>5] #there are 599 orders where it took more than 5 days to deliver the order

data[data['Days_Difference']>5]["Category"].value_counts().plot(kind='bar',figsize=(10,10),
                     title= "Categorywise Product taking more than 5 days for ordering to shipping",
                                                                xlabel='Product Category',ylabel='Num_of_orders')

#from the above graph, binders and paper type products took more than 5 days to deliver
# but we should also keep in mind that most of the data are from 2 categories, binders and papers so we can't be sure.

data[data['Days_Difference']>5]["Geography"].str.split(",").str[-1].value_counts().plot(kind='bar',
                                figsize=(10,10),title= "Geographywise Products taking more than 5 days for ordering to shipping",
                                            xlabel='City',ylabel='Num_of_orders')

data.groupby('City')['Sales'].sum().plot(kind="pie",figsize=(10,10),title= "Geographywise Sales",autopct='%1.0f%%')

data.groupby('Category')['Sales'].sum().plot(kind="pie",figsize=(10,10),title= "Categorywise Sales",autopct='%1.0f%%')



df_num['Days_Difference']=data['Days_Difference']
df_num

corr_matrix=df_num.corr()
corr_matrix
#we can clearly know that Sales and profit are somehow correlated

#For correlation map
plt.figure(figsize=(10, 8))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix')
plt.show()



df['Country'].value_counts() #so all are from US so we maynot need this column

df['State'].value_counts() #there are 169 states there can be some wrong info in it

df['City'].value_counts()

ex1=df[['Sales','State','City']]
ex1

ex1['Days_Difference']=data['Days_Difference']
ex1

# ex1[].groupby('State')['Days_Difference'].mean().sort_values(ascending=False)

data.groupby('City')['Profit'].sum()
#as there are negetive values so lets use bar chart

fig = plt.figure(figsize = (15, 10))
plt.bar(data.groupby('City')['Profit'].sum().keys(),data.groupby('City')['Profit'].sum(),edgecolor="red")

#for categorywise profit
fig = plt.figure(figsize = (20, 12))
plt.bar(data.groupby('Category')['Profit'].sum().keys(),data.groupby('Category')['Profit'].sum(),color="darkgreen",edgecolor="darkgreen")





# Trend Analysis

import matplotlib.pyplot as plt


df['Year'] = df['Order Date'].dt.year


yearly_data = df.groupby('Year').agg({'Sales': 'sum', 'Profit': 'sum'}).reset_index()


plt.figure(figsize=(10, 6))
plt.plot(yearly_data['Year'], yearly_data['Sales'], label='Total Sales', marker='o')
plt.plot(yearly_data['Year'], yearly_data['Profit'], label='Total Profit', marker='o')
plt.xlabel('Year')
plt.ylabel('Amount')
plt.title('Sales and Profit Trends Over the Years')
plt.legend()
plt.grid(True)
plt.show()

category_sales = df.groupby('Category')['Sales'].sum().sort_values(ascending=False)
most_growth_category = category_sales.idxmax()
print("Product category with the most growth in sales over the years:", most_growth_category)
print('\n\n')

# Customer Analysis
top_customers_orders = df.groupby('EmailID')['Order ID'].count().nlargest(5)
top_customers_sales = df.groupby('EmailID')['Sales'].sum().nlargest(5)
print("Top 5 customers based on the number of orders placed:")
print(top_customers_orders)
print("\nTop 5 customers based on total sales generated:")
print(top_customers_sales)

# Insights:
# - From the trend analysis, it can be observed that both sales and profit have shown an increasing trend over the years, with some fluctuations.
# - The product category with the most growth in sales over the years is determined.
# - The top 5 customers based on the number of orders placed and total sales generated are identified, indicating their importance to the business.
# - Repeat purchase behavior can be analyzed by calculating the average time between orders for each customer,
#    which provides insights into customer loyalty and retention strategies.

'''
Comprehensive Analytics:
1.We saw that there were many delivery delays on some order specially some categories and somes region, we can look into what maybe the issue there that delay is happen and
    if we sort this issue we can increase our sales as well as profits.
2.There are some categories which are making loss or negetive profits, so we can replace or stop selling those products to stop our cash flow.
3.We should make efforts on customers's purchasing habits and preferences and make use of it.
4.We should use data analytics to identify patterns or characteristics of high-value customers, such as repeat purchase behavior, average order value, or lifetime value.
5.We can implement customer segmentation strategies to differentiate between high-value, medium-value, and low-value customers.
    This can help allocate resources more effectively and prioritize efforts to retain and acquire high-value customers.
6.Develop personalized loyalty programs or incentives to reward high-value customers and encourage repeat purchases.
    This could include exclusive discounts, early access to new products, or VIP perks.
7.Continuously monitor and analyze customer feedback and satisfaction metrics to identify areas for improvement in the customer experience.
    By addressing pain points and enhancing satisfaction, businesses can strengthen customer loyalty and increase retention rates.

'''

















